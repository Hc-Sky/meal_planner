rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Fonctions utilitaires
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isDebugRoute() {
      return request.resource.data.debug_route == true;
    }
    
    function hasValidRecipeData() {
      return request.resource.data.keys().hasAll(['name', 'ingredients', 'instructions', 'tags', 'calories', 'time_minutes', 'type'])
        && request.resource.data.name is string
        && request.resource.data.ingredients is list
        && request.resource.data.instructions is string
        && request.resource.data.tags is list
        && request.resource.data.calories is number
        && request.resource.data.time_minutes is number
        && request.resource.data.type is string;
    }
    
    function hasValidMenuData() {
      return request.resource.data.keys().hasAll(['userId', 'generatedAt', 'days'])
        && request.resource.data.userId == request.auth.uid
        && request.resource.data.generatedAt is string
        && request.resource.data.days is list;
    }

    // Règles pour la collection des utilisateurs
    match /users/{userId} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId);
      
      // Règles pour la sous-collection des favoris
      match /favorites/{recipeId} {
        allow read: if isOwner(userId);
        allow write: if isOwner(userId);
      }
    }
    
    // Règles pour la collection des menus
    match /menus/{userId} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId) && hasValidMenuData();
    }
    
    // Règles pour la collection des recettes
    match /recipes/{recipeId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && (isDebugRoute() || hasValidRecipeData());
    }
  }
} 